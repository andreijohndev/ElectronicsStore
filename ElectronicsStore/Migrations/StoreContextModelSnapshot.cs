// <auto-generated />
using System;
using ElectronicsStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ElectronicsStore.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ElectronicsStore.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShopSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopSessionId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Controller"
                        });
                });

            modelBuilder.Entity("ElectronicsStore.Entities.GalleryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PictureUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("GalleryImage");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ShopSessionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ShopSessionId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ThumbnailUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Ultra-Lightweight Gaming Mouse with Razer™ Chroma RGB",
                            InventoryId = 1,
                            Name = "Razer Viper Mini",
                            Price = 1500m,
                            ThumbnailUri = "images/razer_viper_mini.png"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Ambidextrous Esports Gaming Mouse with 8000Hz Polling Rate",
                            InventoryId = 2,
                            Name = "Razer Viper 8KHz",
                            Price = 2250m,
                            ThumbnailUri = "images/razer_viper.png"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "LIGHTSPEED Wireless Gaming Mouse",
                            InventoryId = 3,
                            Name = "Logitech G305",
                            Price = 2200m,
                            ThumbnailUri = "images/logitech_g305.png"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "HERO Gaming Mouse",
                            InventoryId = 4,
                            Name = "Logitech G403",
                            Price = 2600m,
                            ThumbnailUri = "images/logitech_g403.png"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "SUPERLIGHT",
                            InventoryId = 5,
                            Name = "Logitech G PRO X",
                            Price = 8000m,
                            ThumbnailUri = "images/logitech_g_pro_x.png"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Wired Gaming Mouse with Best-in-class Ergonomics",
                            InventoryId = 6,
                            Name = "Razer DeathAdder V2",
                            Price = 2500m,
                            ThumbnailUri = "images/razer_deathadder_v2.png"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "MMO Wireless Gaming Mouse with HyperScroll Pro Wheel",
                            InventoryId = 7,
                            Name = "Razer Naga V2 Pro",
                            Price = 7000m,
                            ThumbnailUri = "images/razer_naga_v2_pro.png"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Compact Mechanical keyboard with Razer Chroma RGB",
                            InventoryId = 8,
                            Name = "Razer BlackWidow V3 Pro Tenkeyless",
                            Price = 7690m,
                            ThumbnailUri = "images/razer_blackwidow_v3_pro_tkl.png"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "60% Gaming Keyboard with Razer™ Optical Switch",
                            InventoryId = 9,
                            Name = "Razer Huntsman Mini",
                            Price = 6500m,
                            ThumbnailUri = "images/razer_huntsman_mini.png"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "KEYBOARD",
                            InventoryId = 10,
                            Name = "Logitech G PRO",
                            Price = 5500m,
                            ThumbnailUri = "images/logitech_g_pro.png"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "",
                            InventoryId = 11,
                            Name = "8BitDo SN30 Pro",
                            Price = 1500m,
                            ThumbnailUri = "images/8bitdo_sn30_pro.png"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "",
                            InventoryId = 12,
                            Name = "8BitDo Pro 2",
                            Price = 2000m,
                            ThumbnailUri = "images/8bitdo_pro_2.png"
                        });
                });

            modelBuilder.Entity("ElectronicsStore.Entities.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Quantity = 34
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            Quantity = 36
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            Quantity = 22
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 6,
                            Quantity = 18
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 7,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 8,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 9,
                            Quantity = 21
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 10,
                            Quantity = 23
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 11,
                            Quantity = 46
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 12,
                            Quantity = 34
                        });
                });

            modelBuilder.Entity("ElectronicsStore.Entities.ShopSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ShopSession");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.CartItem", b =>
                {
                    b.HasOne("ElectronicsStore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicsStore.Entities.ShopSession", "Session")
                        .WithMany("CartItems")
                        .HasForeignKey("ShopSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.GalleryImage", b =>
                {
                    b.HasOne("ElectronicsStore.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.OrderDetails", b =>
                {
                    b.HasOne("ElectronicsStore.Entities.ShopSession", "Session")
                        .WithMany()
                        .HasForeignKey("ShopSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.OrderItem", b =>
                {
                    b.HasOne("ElectronicsStore.Entities.OrderDetails", "OrderDetails")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicsStore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetails");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.Product", b =>
                {
                    b.HasOne("ElectronicsStore.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.ProductInventory", b =>
                {
                    b.HasOne("ElectronicsStore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.OrderDetails", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ElectronicsStore.Entities.ShopSession", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
