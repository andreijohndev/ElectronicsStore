@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore;
@using MudBlazor.Utilities
@inject ProtectedLocalStorage ProtectedLocalStoage
@inject StoreContext Context

<MudThemeProvider @ref="@mudThemeProvider" @bind-IsDarkMode="@isDarkMode" Theme="mudTheme" />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudLink Href="/" Typo="Typo.h5" Color="Color.Inherit" Underline="Underline.None" Class="ml-3">Store</MudLink>
        <MudSpacer />
        <MudToggleIconButton Toggled="@isDarkMode" ToggledChanged="OnToggleMode"
                             Icon="@Icons.Material.Filled.DarkMode" Title="Switch to Dark Mode" Color="Color.Inherit"
                             ToggledIcon="@Icons.Material.Filled.LightMode" ToggledTitle="Switch to Light Mode" />
        <ShoppingCart ShopSession="@shopSession" @ref="shoppingCart" />
    </MudAppBar>
    <MudMainContent>
        <CascadingValue Value="@shopSession">
            <CascadingValue Value="@shoppingCart">
                @Body
            </CascadingValue>
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {
    private bool isDarkMode;
    private MudThemeProvider mudThemeProvider;
    private ShoppingCart? shoppingCart;

    private MudTheme mudTheme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
                Primary = new MudColor("ffa40d"),
                AppbarBackground = new MudColor("ffa40d")
        },
        PaletteDark = new PaletteDark()
        {
                Primary = new MudColor("ffa40d")
        }
    };

    private ShopSession? shopSession;

    public void OnToggleMode(bool toggled)
    {
        isDarkMode = toggled;
        Task.Run(async () => await ProtectedLocalStoage.SetAsync("DarkMode", isDarkMode));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var darkModeResult = await ProtectedLocalStoage.GetAsync<bool>("DarkMode");

            if (darkModeResult.Success)
            {
                isDarkMode = darkModeResult.Value;
                StateHasChanged();
            }
            else
            {
                isDarkMode = await mudThemeProvider.GetSystemPreference();
                await ProtectedLocalStoage.SetAsync("DarkMode", isDarkMode);
                StateHasChanged();
            }

            var result = await ProtectedLocalStoage.GetAsync<Guid>("SessionId");

            if (result.Success)
            {
                shopSession = Context.Sessions.Where(x => x.Id == result.Value).Include(x => x.CartItems).First() ?? await GenerateNewSession();
                StateHasChanged();
            }
            else
            {
                await GenerateNewSession();
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<ShopSession> GenerateNewSession()
    {
        var newSession = new ShopSession() { Total = 0, CartItems = new List<CartItem>() };
        Context.Add(newSession);
        Context.SaveChanges();
        shopSession = newSession;
        await ProtectedLocalStoage.SetAsync("SessionId", newSession.Id);
        return newSession;
    }
}
